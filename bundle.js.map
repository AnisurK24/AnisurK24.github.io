{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/BFS.js","webpack:///./src/DFS.js","webpack:///./src/grid.js","webpack:///./src/index.js","webpack:///./src/node.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C,0BAA0B,kBAAkB;AAC5C;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,qBAAqB,GAAG,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe,GAAG,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAqB,GAAG,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe,GAAG,qBAAqB;AACjE;AACA;AACA;AACA;AACA;;;AAGA,wBAAwB,0BAA0B;AAClD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,kEAAG,E;;;;;;;;;;;;AC5GlB;AAAA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,sBAAsB;AAC3C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,kEAAG,EAAC;;;;;;;;;;;;;AC5DnB;AAAA;AAAA;AAAA;AAAA;AAC0B;AAC1B;AACA;AACA;AACA;AACwB;AACA;;;AAGxB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC,6BAA6B,IAAI,GAAG,IAAI;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,6CAAI;AAC/B;AACA,SAAS;AACT;AACA;AACA,0BAA0B,6CAAI;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA,sBAAsB,6CAAI;AAC1B;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,eAAe,4CAAG;AAClB,OAAO;AACP,eAAe,4CAAG;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;;ACxOpB;AAAA;AAA0B;;;AAG1B;AACA,MAAM,6CAAI;AACV;AACA;AACA,kDAAkD,6CAAI;;AAEtD,CAAC;;;AAGD,sC;;;;;;;;;;;;ACZA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","class BFS {\n  constructor(nodes, start, goal, grid) {\n    this.nodes = nodes;\n    this.grid = grid;\n    // this.height = height;\n    // this.width = width;\n    this.start = start;\n    this.goal = goal;\n    // console.log(this.grid);\n    // for (let row = 0; row < this.height; row++) {\n    //   for (let col = 0; col < this.width; col++) {\n    //     if (this.grid[row][col].class === start) {\n    //       this.start = this.grid[row][col];\n    //     } else if (this.grid[row][col].class === goal) {\n    //       this.goal = this.grid[row][col];\n    //     }\n    //   }\n    // }\n  }\n\n  search() {\n    let nodes = this.nodes;\n    let start = this.start;\n    let goal = this.goal;\n    let grid = this.grid;\n    let closedSet = [];\n    \n\n    let queue = [start];\n    start.visited = true;\n    while (queue.length > 0) {\n        let node = queue.shift();\n\n      if (node.id === goal.id) {\n        let path = [];\n        let currentNode = node;\n\n        \n        while (currentNode.parent) {\n          path.push(currentNode);\n          currentNode = currentNode.parent;\n        }\n        \n        // console.log(grid);\n        return { path: path.reverse(), visitedNodes: closedSet };\n      }\n      // console.log(goal.id);\n      // console.log(node.id);\n\n      const coordinates = node.id.split(\"-\");\n      const row = parseInt(coordinates[0]);\n      const col = parseInt(coordinates[1]);\n\n      // let nodeHTML = document.getElementById(node.id);\n      // console.log(nodeHTML);\n      if (node.id !== start.id) {\n        // nodeHTML.className = \"visited\";\n        node.visited = true;\n        closedSet.push(node);\n      }\n\n      // let neighborNodes = [];\n      let neighborNode;\n      if (grid[row - 1] && grid[row - 1][col]) {\n        neighborNode = `${(row - 1).toString()}-${col.toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n          }\n      }\n      if (grid[col + 1] && grid[row][col + 1]) {\n        neighborNode = `${row.toString()}-${(col + 1).toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n          }\n      }\n      if (grid[row + 1] && grid[row + 1][col]) {\n        neighborNode = `${(row + 1).toString()}-${col.toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n          }\n      }\n      if (grid[col - 1] && grid[row][col - 1]) {\n        neighborNode = `${row.toString()}-${(col - 1).toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n          }\n      }\n\n\n      // for (let i = 0; i < neighborNodes.length; i++) {\n        // let neighbor = neighborNodes[i];\n\n        // if (n.closed || n.weight === 0) continue;\n\n        // if (!neighbor.visited) {\n          // n.visited = true;\n          // neighbor.parent = currNode;\n          // queue.push(neighbor);\n        // }\n      // }\n    }\n  }\n}\n\nexport default BFS;","class DFS {\n  constructor(graph, start, end) {\n    this.start = start;\n    this.end = end;\n    this.graph = graph;\n\n    for (let x = 0; x < this.graph.length; x++) {\n      for (let y = 0; y < this.graph[x].length; y++) {\n        this.graph[x][y].parent = null;\n      }\n    }\n  }\n\n  search() {\n    const graph = this.graph;\n    const start = this.start;\n    const end = this.end;\n    const closedSet = [];\n\n    let stack = [[start, []]];\n\n    while (stack.length > 0) {\n      let currState = stack.pop();\n      let currNode = currState[0];\n      let currPath = currState[1];\n\n      if (currNode.x === end.x && currNode.y === end.y) {\n        return { path: currPath, closedSet: closedSet };\n      }\n\n      if (currNode.closed) {\n        continue;\n      }\n\n      let neighbors = graph.neighbors(currNode);\n      for (let i = 0; i < neighbors.length; i++) {\n        let n = neighbors[i];\n\n        if (n.weight === 0) continue;\n\n        if (n.x === end.x && n.y === end.y) {\n          return {\n            path: currPath.concat([n]),\n            closedSet: closedSet.concat([currNode])\n          };\n        }\n\n        if (!n.visited) {\n          n.visited = true;\n          n.parent = currNode;\n          stack.push([n, currPath.concat([n])]);\n        }\n      }\n\n      currNode.closed = true;\n      closedSet.push(currNode);\n    }\n  }\n}\n\nexport default DFS;\n","// import BuildTree from \"./search.js\";\nimport Node from \"./node\";\n// import BFSDFS from \"./BFSDFS\";\n// import SearchGraph from \"./search_graph\";\n// import SearchGraph from \"./search_graph\";\n// import AStar from \"./astar\";\nimport BFS from \"./BFS\";\nimport DFS from \"./DFS\";\n\n\nclass Grid {\n  constructor($graph) {\n    this.$graph = $graph;\n\n    this.grid = [];\n    this.nodeObject = {};\n    this.start = null;\n    this.goal = null;\n\n    this.width = this.checkWidth();\n    this.height = this.checkHeight();\n    this.gridSize = this.checkGridSize();\n    this.gridStyle = this.checkGridGen();\n    this.clearGrid = this.clearGridBtn();\n    this.algo = this.checkAlgo();\n    this.startSearch = this.startAlgo();\n    console.log(this.$graph);\n    console.log(this.nodeObject);\n    console.log(this.grid);\n\n    $graph.empty();\n    this.newGrid($graph);\n\n    // this.newGrid = this.newGrid.bind(this);\n\n    // this.searchGraph = new SearchGraph(this.nodes);\n    // this.$cells = $graph.find(\".walkable\");\n    // this.$cells.bind(\"click\", e => this.clickCell($(e.target)));\n  }\n\n  newGrid($graph) {\n    const height = this.height;\n    const width = this.width;\n    const gridSize = this.gridSize;\n    const $cellHTML = $(\"<td />\");\n\n    $cellHTML\n      .width($graph.width() / gridSize - 1)\n      .height($graph.width() / gridSize - 1);\n\n    for (let row = 0; row < height; row++) {\n      let $rowHTML = $(\"<tr />\").addClass(\"grid-row\");\n      // const currentNodeRow = [];\n      // const currentNodeORow = [];\n      const currentGridRow = [];\n\n      for (let col = 0; col < width; col++) {\n        const newNodeId = `${row}-${col}`;\n        let newNodeClass;\n        let newNode;\n\n        let $cell = $cellHTML.clone();\n        $cell\n          .attr(\"id\", newNodeId);\n          // .attr(\"x\", row)\n          // .attr(\"y\", col);\n\n        if (row === 1 && col === 1) {\n          newNodeClass = \"start\";\n          $cell.addClass(\"start\");\n          this.start = new Node(newNodeId, newNodeClass);\n          // $cell.addClass(\"fas fa-dog\");\n        } else if (row === 8 && col === 8) {\n          newNodeClass = \"goal\";\n          $cell.addClass(\"goal\");\n          this.goal = new Node(newNodeId, newNodeClass);\n          // $cell.addClass(\"fas fa-user\");\n        } else {\n          $cell.addClass(\"walkable\");\n          newNodeClass = \"walkable\";\n        }\n\n        newNode = new Node(newNodeId, newNodeClass);\n        // currentNodeRow.push(newNode);\n        $rowHTML.append($cell);\n        currentGridRow.push($cell);\n        this.nodeObject[`${newNodeId}`] = newNode;\n      }\n\n      this.grid.push(currentGridRow);\n      // this.nodes.push(currentNodeRow);\n      $graph.append($rowHTML);\n    }\n  }\n\n  checkGridSize() {\n    if (document.getElementById(\"grids_1\").checked) {\n      return 50;\n    } else if (document.getElementById(\"grids_2\").checked) {\n      return 75;\n    } else {\n      return 100;\n    }\n  }\n\n  checkHeight() {\n    if (this.checkGridSize() === 50) {\n      return 17;\n    } else if (this.checkGridSize() === 75) {\n      return 25;\n    } else {\n      return 33;\n    }\n  }\n\n  checkWidth() {\n    if (this.checkGridSize() === 50) {\n      return 42;\n    } else if (this.checkGridSize() === 75) {\n      return 62;\n    } else {\n      return 82;\n    }\n  }\n\n  clearGridBtn() {\n    document.getElementById(\"CGrid\").onclick = () => {\n      this.clearWalls();\n      // console.log(\"text\");\n    };\n  }\n\n  clearWalls() {\n    Object.keys(this.nodeObject).forEach(node => {\n      let nodeHTML = document.getElementById(node);\n      let currentNode = this.nodeObject[node];\n      if (currentNode.status === \"block\") {\n        currentNode.status = \"walkable\";\n        nodeHTML.className = \"walkable\";\n      }\n    });\n  }\n\n  checkGridGen() {\n    document.getElementById(\"PGrid\").onclick = () => {\n      if (document.getElementById(\"gridg_1\").checked) {\n        console.log(this.grid);\n        this.clearWalls();\n        this.randomGridGen();\n      } else {\n        this.clearWalls();\n        this.mazeGridGen();\n      }\n    };\n  }\n\n  randomGridGen() {\n    Object.keys(this.nodeObject).forEach(node => {\n      let nodesToSkip = [\"start\", \"goal\"];\n      let nodeHTML = document.getElementById(node);\n      let blocked = Math.floor(Math.random() * 4);\n      if (!nodesToSkip.includes(nodeHTML.className) && blocked === 0) {\n        nodeHTML.className = \"block\";\n        this.nodeObject[node].status = \"block\";\n      }\n    });\n  }\n\n  mazeGridGen() {\n    // let outline = false;\n    // if (!outline) {\n      Object.keys(this.nodeObject).forEach(node => {\n        let nodesToSkip = [\"start\", \"goal\"];\n        let nodeHTML = document.getElementById(node);\n      if (!nodesToSkip.includes(nodeHTML.className)) {\n        let row = parseInt(node.split(\"-\")[0]);\n        let col = parseInt(node.split(\"-\")[1]);\n        let nodeHTML = document.getElementById(node);\n        if (\n          row === 0 ||\n          col === 0 ||\n          row === this.height - 1 ||\n          col === this.width - 1\n        ) {\n          nodeHTML.className = \"block\";\n          // console.log(nodeHTML);\n          this.nodeObject[node].status = \"block\";\n        }\n        // outline = true;\n      }\n    });\n    // }\n  }\n\n  checkAlgo() {\n    // document.getElementById(\"StartButton\").onclick = () => {\n      if (document.getElementById(\"BFS\").checked) {\n        return BFS;\n      } else if (document.getElementById(\"DFS\").checked) {\n        return BFS;\n      }\n    // };\n  }\n\n  startAlgo() {\n    document.getElementById(\"StartButton\").onclick = () => {\n      // console.log(\"startAlgobutton\");\n      // this.$start = this.$cells.filter(\".start\");\n      this.algo = this.checkAlgo();\n      let algoObj = new this.algo(this.nodeObject, this.start, this.goal, this.grid);\n      let {path, visitedNodes} = algoObj.search();\n      this.path = path;\n      this.highlightVisited(visitedNodes, 0);\n    };\n  }\n\n  highlightVisited(visitedNodes, i) {\n    // console.log(visitedNodes[i].id);\n    setInterval(() => {\n      let j = i;\n      while (j < visitedNodes.length - 1) {\n        let nodeHTML = document.getElementById(visitedNodes[j].id);\n        nodeHTML.className = \"visited\";\n      j++;\n      // if (i < visitedNodes.length - 1) {\n        // this.highlightVisited(visitedNodes, i+1);\n      }\n      }, 1000);\n  }\n\n}\n\nexport default Grid;\n\n","import Grid from \"./grid\";\n\n\n$(document).ready(() => {\n  new Grid($(\"#grid\"));\n  // console.log(Grid);\n  const $newGridBtn = document.getElementById(\"GGrid\");\n  $newGridBtn.addEventListener(\"click\", () => new Grid($(\"#grid\")));\n\n});\n\n\n// console.log(\"Webpack is working!\");","class Node {\n  constructor(id, status) {\n      this.id = id;\n      this.status = status;\n      // this.previousNode = null;\n      this.weight = 0;\n      // this.path = null;\n      // this.x = x;\n      // this.y = y;\n    // this.pos = { x: this.x, y: this.y };\n    // this.weight = weight;\n\n    // this.f = 0;\n    // this.g = 0;\n    // this.h = 0;\n\n    this.visited = false;\n    // this.closed = false;\n    this.parent = null;\n  }\n}\n\nexport default Node;\n"],"sourceRoot":""}