{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/BFS.js","webpack:///./src/DFS.js","webpack:///./src/grid.js","webpack:///./src/index.js","webpack:///./src/node.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,qBAAqB,GAAG,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe,GAAG,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAqB,GAAG,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe,GAAG,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,kEAAG,E;;;;;;;;;;;;AC9FlB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,eAAe,GAAG,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAqB,GAAG,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe,GAAG,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAqB,GAAG,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,kEAAG,EAAC;;;;;;;;;;;;;ACvFnB;AAAA;AAAA;AAAA;AAA0B;AACF;AACA;;;AAGxB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;;AAEA,uBAAuB,aAAa;AACpC,6BAA6B,IAAI,GAAG,IAAI;AACxC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,6CAAI;AAC/B,SAAS;AACT;AACA;AACA,0BAA0B,6CAAI;AAC9B,SAAS;AACT;AACA;AACA;;AAEA,sBAAsB,6CAAI;AAC1B;AACA;AACA,2BAA2B,UAAU;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,4CAAG;AAChB,KAAK;AACL,aAAa,4CAAG;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,S;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,4B;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA,MAAM;AACN;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;;ACrQpB;AAAA;AAA0B;;;AAG1B;AACA,MAAM,6CAAI;AACV;AACA,kDAAkD,6CAAI;;AAEtD,CAAC;;;;;;;;;;;;;ACRD;AAAA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","class BFS {\n  constructor(nodes, start, goal, grid) {\n    this.nodes = nodes;\n    this.grid = grid;\n    this.start = start;\n    this.goal = goal;\n    console.log(grid);\n    console.log(nodes);\n    Object.keys(this.nodes).forEach(node => {\n      let currentNode = this.nodes[node];\n      currentNode.visited = false;\n      currentNode.parent = null;\n    });\n  }\n\n  search() {\n    let nodes = this.nodes;\n    let start = this.start;\n    let goal = this.goal;\n    let grid = this.grid;\n    let closedSet = [];\n    \n\n    let queue = [start];\n    start.visited = true;\n\n    while (queue.length > 0) {\n        let node = queue.shift();\n\n      if (node.id === goal.id) {\n        let path = [];\n        let currentNode = node;\n\n        \n        while (currentNode.parent) {\n          path.push(currentNode.id);\n          currentNode = currentNode.parent;\n        }\n        \n        // console.log(path);\n        return { path: path.reverse(), visitedNodes: closedSet };\n      }\n      \n\n      const coordinates = node.id.split(\"-\");\n      const row = parseInt(coordinates[0]);\n      const col = parseInt(coordinates[1]);\n\n      // let nodeHTML = document.getElementById(node.id);\n      // console.log(nodeHTML);\n      if (node.id !== start.id) {\n        // nodeHTML.className = \"visited\";\n        // node.visited = true;\n        closedSet.push(node.id);\n      }\n\n      // let neighborNodes = [];\n      let neighborNode;\n      if (grid[row - 1] && grid[row - 1][col]) {\n        neighborNode = `${(row - 1).toString()}-${col.toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n      if (grid[0][col + 1] && grid[row][col + 1]) {\n        neighborNode = `${row.toString()}-${(col + 1).toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n      if (grid[row + 1] && grid[row + 1][col]) {\n        neighborNode = `${(row + 1).toString()}-${col.toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n      if (grid[0][col - 1] && grid[row][col - 1]) {\n        neighborNode = `${row.toString()}-${(col - 1).toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                queue.push(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n    }\n  }\n}\n\nexport default BFS;","class DFS {\n  constructor(nodes, start, goal, grid) {\n    this.nodes = nodes;\n    this.grid = grid;\n    this.start = start;\n    this.goal = goal;\n    console.log(grid);\n    console.log(nodes);\n    Object.keys(this.nodes).forEach(node => {\n      let currentNode = this.nodes[node];\n      currentNode.visited = false;\n      currentNode.parent = null;\n    });\n  }\n\n  search() {\n    let nodes = this.nodes;\n    let start = this.start;\n    let goal = this.goal;\n    let grid = this.grid;\n    let closedSet = [];\n    \n\n    let stack = [start];\n    start.visited = true;\n\n    while (stack.length > 0) {\n        let node = stack.shift();\n\n      if (node.id === goal.id) {\n        let path = [];\n        let currentNode = node;\n\n        \n        while (currentNode.parent) {\n          path.push(currentNode.id);\n          currentNode = currentNode.parent;\n        }\n        \n        return { path: path.reverse(), visitedNodes: closedSet };\n      }\n      \n      const coordinates = node.id.split(\"-\");\n      const row = parseInt(coordinates[0]);\n      const col = parseInt(coordinates[1]);\n\n      if (node.id !== start.id) {\n        closedSet.push(node.id);\n      }\n\n      let neighborNode;\n      if (grid[0][col - 1] && grid[row][col - 1]) {\n        neighborNode = `${row.toString()}-${(col - 1).toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                stack.unshift(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n      if (grid[row + 1] && grid[row + 1][col]) {\n        neighborNode = `${(row + 1).toString()}-${col.toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                stack.unshift(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n      if (grid[0][col + 1] && grid[row][col + 1]) {\n        neighborNode = `${row.toString()}-${(col + 1).toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                stack.unshift(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n      if (grid[row - 1] && grid[row - 1][col]) {\n        neighborNode = `${(row - 1).toString()}-${col.toString()}`;\n          if (nodes[neighborNode].status !== \"block\" && !nodes[neighborNode].visited) {\n                stack.unshift(nodes[neighborNode]);\n                nodes[neighborNode].parent = node;\n                nodes[neighborNode].visited = true;\n          }\n      }\n    }\n  }\n}\n\nexport default DFS;\n","import Node from \"./node\";\nimport BFS from \"./BFS\";\nimport DFS from \"./DFS\";\n\n\nclass Grid {\n  constructor($graph) {\n    this.$graph = $graph;\n\n    this.grid = [];\n    this.nodeObject = {};\n    this.start = null;\n    this.goal = null;\n\n    this.width = this.checkWidth();\n    this.height = this.checkHeight();\n    this.gridSize = this.checkGridSize();\n    this.gridStyle = this.checkGridGen();\n    this.clearGrid = this.clearGridBtn();\n    this.algo = this.checkAlgo();\n    this.startSearch = this.startAlgo();\n    // console.log(this.$graph);\n    // console.log(this.nodeObject);\n    // console.log(this.grid);\n\n    $graph.empty();\n    this.newGrid($graph);\n  }\n\n  newGrid($graph) {\n    const height = this.height;\n    const width = this.width;\n    const gridSize = this.gridSize;\n    const $cellHTML = $(\"<td />\");\n\n    $cellHTML\n      .width($graph.width() / gridSize - 1)\n      .height($graph.width() / gridSize - 1);\n\n    for (let row = 0; row < height; row++) {\n      let $rowHTML = $(\"<tr />\").addClass(\"grid-row\");\n      const currentGridRow = [];\n\n      for (let col = 0; col < width; col++) {\n        const newNodeId = `${row}-${col}`;\n        let newNodeClass;\n        let newNode;\n\n        let $cell = $cellHTML.clone();\n        $cell.attr(\"id\", newNodeId);\n\n        if (row === 1 && col === 1) {\n          newNodeClass = \"start\";\n          $cell.addClass(\"start\");\n          this.start = new Node(newNodeId, newNodeClass);\n        } else if (row === height - 2 && col === width - 2) {\n          newNodeClass = \"goal\";\n          $cell.addClass(\"goal\");\n          this.goal = new Node(newNodeId, newNodeClass);\n        } else {\n          $cell.addClass(\"walkable\");\n          newNodeClass = \"walkable\";\n        }\n\n        newNode = new Node(newNodeId, newNodeClass);\n        $rowHTML.append($cell);\n        currentGridRow.push($cell);\n        this.nodeObject[`${newNodeId}`] = newNode;\n      }\n\n      this.grid.push(currentGridRow);\n      $graph.append($rowHTML);\n    }\n  }\n\n  checkGridSize() {\n    if (document.getElementById(\"grids_1\").checked) {\n      return 50;\n    } else if (document.getElementById(\"grids_2\").checked) {\n      return 75;\n    } else {\n      return 100;\n    }\n  }\n\n  checkHeight() {\n    if (this.checkGridSize() === 50) {\n      return 17;\n    } else if (this.checkGridSize() === 75) {\n      return 25;\n    } else {\n      return 33;\n    }\n  }\n\n  checkWidth() {\n    if (this.checkGridSize() === 50) {\n      return 42;\n    } else if (this.checkGridSize() === 75) {\n      return 62;\n    } else {\n      return 82;\n    }\n  }\n\n  clearGridBtn() {\n    document.getElementById(\"CGrid\").onclick = () => {\n      this.clearWalls();\n      this.clearVisited();\n      this.clearPath();\n    };\n  }\n\n  clearWalls() {\n    Object.keys(this.nodeObject).forEach(node => {\n      let nodeHTML = document.getElementById(node);\n      let currentNode = this.nodeObject[node];\n      if (nodeHTML.className === \"block\") {\n        currentNode.status = \"walkable\";\n        nodeHTML.className = \"walkable\";\n      }\n    });\n  }\n\n  clearVisited() {\n    Object.keys(this.nodeObject).forEach(node => {\n      let nodeHTML = document.getElementById(node);\n      let currentNode = this.nodeObject[node];\n      if (nodeHTML.className === \"visited\") {\n        currentNode.status = \"walkable\";\n        nodeHTML.className = \"walkable\";\n      }\n    });\n  }\n\n  clearPath() {\n    Object.keys(this.nodeObject).forEach(node => {\n      let nodeHTML = document.getElementById(node);\n      let currentNode = this.nodeObject[node];\n      if (nodeHTML.className === \"path\") {\n        currentNode.status = \"walkable\";\n        nodeHTML.className = \"walkable\";\n      }\n    });\n  }\n\n  checkGridGen() {\n    document.getElementById(\"PGrid\").onclick = () => {\n      if (document.getElementById(\"gridg_1\").checked) {\n        console.log(this.grid);\n        this.clearWalls();\n        this.clearVisited();\n        this.clearPath();\n        this.randomGridGen();\n      } else {\n        this.clearWalls();\n        this.clearVisited();\n        this.clearPath();\n        this.mazeGridGen();\n      }\n    };\n  }\n\n  randomGridGen() {\n    Object.keys(this.nodeObject).forEach(node => {\n      let nodesToSkip = [\"start\", \"goal\"];\n      let nodeHTML = document.getElementById(node);\n      let blocked = Math.floor(Math.random() * 4);\n      if (!nodesToSkip.includes(nodeHTML.className) && blocked === 0) {\n        nodeHTML.className = \"block\";\n        this.nodeObject[node].status = \"block\";\n      }\n    });\n  }\n\n  mazeGridGen() {\n    Object.keys(this.nodeObject).forEach(node => {\n      let nodesToSkip = [\"start\", \"goal\"];\n      let nodeHTML = document.getElementById(node);\n      if (!nodesToSkip.includes(nodeHTML.className)) {\n        let row = parseInt(node.split(\"-\")[0]);\n        let col = parseInt(node.split(\"-\")[1]);\n        let nodeHTML = document.getElementById(node);\n        if (\n          row === 0 ||\n          col === 0 ||\n          row === this.height - 1 ||\n          col === this.width - 1\n        ) {\n          nodeHTML.className = \"block\";\n          this.nodeObject[node].status = \"block\";\n        }\n      }\n    });\n  }\n\n  checkAlgo() {\n    if (document.getElementById(\"BFS\").checked) {\n      return BFS;\n    } else if (document.getElementById(\"DFS\").checked) {\n      return DFS;\n    }\n  }\n\n  startAlgo() {\n    document.getElementById(\"StartButton\").onclick = () => {\n      this.clearVisited();\n      this.clearPath();\n      this.algo = this.checkAlgo();\n      let algoObj = new this.algo(\n        this.nodeObject,\n        this.start,\n        this.goal,\n        this.grid\n      );\n      let { path, visitedNodes } = algoObj.search();\n      this.path = path;\n      this.highlightVisited(visitedNodes, 0);\n      // console.log(path);\n      // console.log(this.grid);\n      // console.log(visitedNodes);\n      console.log(this.nodeObject);\n      console.log(this.grid);\n    };\n  }\n\n  highlightVisited(visitedNodes, i) {\n      let nodeHTML = document.getElementById(visitedNodes[i]);\n      nodeHTML.className = \"visited\";\n      setTimeout(() => {\n        if (i < visitedNodes.length - 1) {\n        this.highlightVisited(visitedNodes, i+1);\n        } else {\n          this.highlightPath(this.path, 0);\n        } \n    }, 1);\n  }\n\n  highlightPath(path, i) {\n    let nodeHTML = document.getElementById(path[i]);\n    nodeHTML.className = \"path\";\n    setTimeout(() => {\n      if (i < path.length - 2) {\n      this.highlightPath(path, i+1);\n    }\n    }, 10);\n  }\n\n  // addEventListener(\"mousedown\", function(e){\n  //   mouseDownFunction(e); \n\n  //   document.onmousemove = function(e) {\n  //       mouseMoveFunction(e);\n  //    }\n  // });\n\n  // document.addEventListener(\"mouseup\", function(e){\n  //     myObject.onmousemove = null;\n  // });\n}\n\nexport default Grid;\n\n","import Grid from \"./grid\";\n\n\n$(document).ready(() => {\n  new Grid($(\"#grid\"));\n  const $newGridBtn = document.getElementById(\"GGrid\");\n  $newGridBtn.addEventListener(\"click\", () => new Grid($(\"#grid\")));\n\n});\n","class Node {\n  constructor(id, status) {\n      this.id = id;\n      this.status = status;\n      // this.weight = 0;\n      \n\n\n    this.visited = false;\n    this.parent = null;\n  }\n}\n\nexport default Node;\n"],"sourceRoot":""}